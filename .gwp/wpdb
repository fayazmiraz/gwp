#!/bin/bash

#################################################################
# Does some operations on the database of WordPress installation
# Currently supported operations:
# -d = dump DB to default file
# ( -d is default when no other option is provided )
# -r = replace DB with default DB file
# -D <file>: dump DB to <file>
# -R <file>: replace DB with <file>
# ---------------------------------------------------------------
# @usage:
# $ [git] wpdb [-d|-D dump-to_file][-r|-R replace-with_file]
# 
# @todo: dump DB and replace DB works according to dev, changes
#        it to work for live (and hub) as well
#################################################################

# ---- PATH of this file's directory
SCRIPT_ROOT=$( cd "$(dirname "$0")"; PWD -P )

# ---- Program name
PROG_NAME=$( basename $0 )

# ---- include Configs & Global Variables
source "${SCRIPT_ROOT}/gwp.conf"
if [[ $? -ne 0 ]]; then
    error_exit "$LINENO: Error in [${SCRIPT_ROOT}/gwp.conf]! Aborting program."
fi

# ---- include DB config extract function
source "${SCRIPT_ROOT}/extract_wp_db_config"
if [[ $? -ne 0 ]]; then
    error_exit "$LINENO: Failed to include necessary functions! Aborting ${PROG_NAME} program."
fi

# ---- Options
DUMP_DB="false"
REPLACE_DB="false"
DUMP_FILE=""
REPLACE_FILE=""

# ---- get options
# Reset getopts $opt position
OPTIND=1
# @notes:
# 1. starting : in ":dD:rR:" takes getopts to silent mode
# 2. ":" after any option letter means it must have an argument.
# 3. getopts doesn't support options with "optional" argument.
while getopts ":dD:rR:" opt; do
  case $opt in   
    d)
        DUMP_DB="true"
        ;;
    D)
        DUMP_DB="true"
        DUMP_FILE="$OPTARG"
        ;;
    r)
        REPLACE_DB="true"
        ;;
    R)
        REPLACE_DB="true"
        REPLACE_FILE="$OPTARG"
        ;;
    \?)
        error_exit "$LINENO: Invalid option: -${OPTARG}"
        ;;
    :)
        error_exit "$LINENO: Argument missing for option: -${OPTARG}"
        ;;
  esac
done
if [[ "false" == "$DUMP_DB" && "false" == "$REPLACE_DB" ]]; then
    DUMP_DB="true"
fi

# ---- include DB functions
if [[ "true" == "$DUMP_DB" ]]; then
    source "${SCRIPT_ROOT}/dump_db"
    if [[ $? -ne 0 ]]; then
        error_exit "$LINENO: Failed to include DUMP DB function! Aborting ${PROG_NAME} program."
    fi
    if [[ -z "$DUMP_FILE" ]]; then
        DUMP_FILE="$DB_PATH/${REPO_NAME}.sql"
    else
        if [[ -d "$DUMP_FILE" ]]; then
            DUMP_FILE="$DUMP_FILE/${REPO_NAME}.sql"
        elif [[ ! -f "$DUMP_FILE" ]]; then
            touch "$DUMP_FILE"
            if [[ $? -ne 0 ]]; then
                error_exit "$LINENO: Failed to create DB DUMP file: [$DUMP_FILE]! Aborting ${PROG_NAME} program."
            fi
        fi
    fi
fi
if [[ "true" == "$REPLACE_DB" ]]; then
    source "${SCRIPT_ROOT}/replace_db"
    if [[ $? -ne 0 ]]; then
        error_exit "$LINENO: Failed to include REPLACE DB function! Aborting ${PROG_NAME} program."
    fi
    if [[ -z "$REPLACE_FILE" ]]; then
        REPLACE_FILE="$DB_PATH/live.sql"
    elif [[ -d "$REPLACE_FILE" ]]; then
        REPLACE_FILE="$REPLACE_FILE/live.sql"
    fi        
    if [[ ! -f "$REPLACE_FILE" ]]; then
        error_exit "$LINENO: Failed to recognize DB Replace file: [$REPLACE_FILE]! Aborting ${PROG_NAME} program."
    fi
fi

# ---- this is expensive operation, so ask for confirmation
echo " "
echo "--------------------------------------"
echo "You've selected the following options:"
echo "DUMP DB      : ${DUMP_DB}"
echo "DUMP File    : ${DUMP_FILE}"
echo "REPLACE DB   : ${REPLACE_DB}"
echo "REPLACE File : ${REPLACE_FILE}"
echo "--------------------------------------"
echo " "
cnt=$( response "Continue?" )
if [[ "false" == "$cnt" ]]; then
    echo " "
    echo "You choose not to continue!"
    echo "Nothing is done this time. Program aborted."
    exit 0
fi

if [[ -z "$DB_NAME" || -z "$DB_USER" || -z "$DB_PASSWORD" ]]; then
    extract_wp_db_config "$WP_CONFIG"
fi

# ---- DB dump
if [[ "true" == "$DUMP_DB" ]]; then
    echo " "
    echo "**** Dumping DB to [file=$DUMP_FILE]"
    dump_db "$DB_NAME" "$DB_USER" "$DB_PASSWORD" "$DUMP_FILE"
fi

# ---- DB replace
if [[ "true" == "$REPLACE_DB" ]]; then
    echo " "
    echo "**** Replacing DB with [file=$REPLACE_FILE]"
    replace_db "$DB_NAME" "$DB_USER" "$DB_PASSWORD" "$REPLACE_FILE"
fi